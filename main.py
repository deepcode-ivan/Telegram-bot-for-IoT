# -*- coding: utf-8 -*-
import telebot
from telebot import types
import config               # —Ñ–∞–π–ª —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
import time
import sql
import voice
import requests
import urllib3
import copy
from threading import Thread

bot = telebot.TeleBot(config.bot_token)

@bot.message_handler(commands=["start"])
def autontify(message):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_phone = types.KeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", request_contact=True)
    keyboard.add(button_phone)
    msg = bot.send_message(message.chat.id, text="–í—Ö–æ–¥", reply_markup=keyboard)
    try:
        bot.register_next_step_handler(msg, check_phone)
    except (ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError,
            urllib3.exceptions.ReadTimeoutError, requests.exceptions.ReadTimeout, requests.exceptions.ConnectionError):
        print('!!!')

def check_phone(msg):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    bot.send_message(msg.chat.id, text=msg.contact.phone_number)
    telnum = sql.check_phone(msg.contact.phone_number[-11:])
    if  telnum != True:
        sql.add_user(msg.contact.phone_number[-11:], msg.from_user.id)
    menu(msg)

def menu(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard_menu = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard_menu.add(*[types.KeyboardButton(name) for name in ["üöÄ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                                                "üó£ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã","üö™ –í—ã—Ö–æ–¥"]])
    try:
        bot.send_message(message.from_user.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üòä", reply_markup=keyboard_menu)

        t = Thread(target=security, args=(message,)) # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–Ω–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        t.start()

    except (ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError):
        print('!!!')


def security(m):                ################################################
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    new_topics=[]
    old_topics=[]
    old_sec_data=[]
    while True:
        sec_data = sql.device_data_for_user('SENSOR',
                                            m.from_user.id)  # topic, topic_alias, measurement, value, climat_mode, alarm_mode
        for topic in sec_data:
            if topic[5] == 1:
                new_topics.append(topic[0])

        for topic in old_sec_data:
            if topic[5] == 1:
                old_topics.append(topic[0])
        # print(old_sec_data)

        # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        for topic in new_topics:
            if topic not in old_topics:
                for i in sec_data:
                    if i[0] == topic:
                        if i[3] == 'Opened': txt = '–û—Ç–∫—Ä—ã—Ç–æ'
                        elif i[3] == 'Closed': txt = '–ó–∞–∫—Ä—ã—Ç–æ'
                        elif i[3] == 'Motion detected': txt = '–ï—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ'
                        elif i[3] == 'No motion': txt = '–ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è'
                        else: txt = i[3]
                        bot.send_message(m.from_user.id,
                                         text='%s %s %s %s'%(i[0],i[1],i[2],txt))

        # –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ value
        for topic in new_topics:
            if topic in old_topics:
                for i in sec_data:
                    for j in old_sec_data:
                        if i[0] == topic and i[0] == j[0] and i[3] != j[3]:
                            if i[3] == 'Opened':
                                txt = '–û—Ç–∫—Ä—ã—Ç–æ'
                            elif i[3] == 'Closed':
                                txt = '–ó–∞–∫—Ä—ã—Ç–æ'
                            elif i[3] == 'Motion detected':
                                txt = '–ï—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ'
                            elif i[3] == 'No motion':
                                txt = '–ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è'
                            else: txt = i[3]
                            bot.send_message(m.from_user.id,
                                             text='%s %s %s %s' % (i[0], i[1], i[2], txt))

        old_sec_data = copy.deepcopy(sec_data)
        sec_data.clear()
        new_topics.clear()
        old_topics.clear()


@bot.message_handler(content_types=["text"])
def control(message):
    """–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞->–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
    # print('–≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏', message.from_user.id)
    if message.text == "üöÄ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞":
        btn_switches = types.InlineKeyboardButton("–í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏", callback_data='switches')
        btn_sensors = types.InlineKeyboardButton("–î–∞—Ç—á–∏–∫–∏", callback_data='sensors')
        btn_modes = types.InlineKeyboardButton("–†–µ–∂–∏–º—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data='modes')
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(btn_switches, btn_sensors, btn_modes)
        try:
            bot.send_message(message.from_user.id, "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏:", reply_markup=keyboard)
        except (ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError, requests.exceptions.ReadTimeout):
            print('!!!')

    elif message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        btn_modulesInfo = types.InlineKeyboardButton("–ò–Ω—Ñ–æ –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Wi-Fi –º–æ–¥—É–ª—è—Ö", callback_data='m_info')
        btn_modulesAddDel = types.InlineKeyboardButton("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–£–¥–∞–ª–µ–Ω–∏–µ Wi-Fi –º–æ–¥—É–ª–µ–π", callback_data='m_add')
        btn_devNames = types.InlineKeyboardButton("–ò–º–µ–Ω–∞ –º–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data='d_names')
        btn_voiceCom = types.InlineKeyboardButton("–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data='v_com')
        btn_modesUsers = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='m_users')
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(btn_modulesInfo, btn_modulesAddDel, btn_devNames, btn_voiceCom,  btn_modesUsers)
        try:
            bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
        except (ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError, requests.exceptions.ReadTimeout):
            print('!!!')

    elif message.text == "üó£ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã":
        topics_names = sql.topics_names(message.from_user.id)
        # print(topics_names)
        voice_com = sql.voice_com()
        # print(voice_com)
        rez = []
        for i in voice_com:
            for j in topics_names:
                if i[1] == j[0]:
                    typecom=''
                    if i[3] == 'DATA': typecom = '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
                    elif i[3] == 'ON': typecom = '–í–∫–ª—é—á–∏—Ç—å'
                    elif i[3] == 'OFF': typecom = '–í—ã–∫–ª—é—á–∏—Ç—å'
                    rez_consist = [i[1], j[1], i[2], typecom]
                    rez.append(rez_consist)
        bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Å–∫–∞–∂–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —è –≤—ã–ø–æ–ª–Ω—é:')
        for i in rez:
            bot.send_message(message.from_user.id, 'üî∫–¢–æ–ø–∏–∫: '+i[0] +'\nüîπ–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n'+'<b>'+i[1]+'</b>\nüî∏–¢–∏–ø –∫–æ–º–∞–Ω–¥—ã: '+i[3]+'\nüó£–¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã:\n'+'<i>'+i[2]+'</i>', parse_mode='HTML')

    elif message.text == "üö™ –í—ã—Ö–æ–¥":
        autontify(message)


############################################################################################## --- –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ---
# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö SWITCH –∏–∑ –ë–î
@bot.callback_query_handler(func=lambda call: call.data == 'switches')
def switches(call):
    # print('call.from_user.id',call.from_user.id)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    btns=sql.device_data_for_user('SWITCH', call.from_user.id)  # topic, topic_alias, measurement, value, alarm_mode
    # print(btns)
    for btn in btns:
        if btn[3] == '1': emoji = 'üí°'
        else: emoji = '‚ú®'
        b=types.InlineKeyboardButton(emoji + btn[1], callback_data=btn[0]+','+btn[3]+',sw') # 0-—Ç–æ–ø–∏–∫, 1-–∞–ª–∏–∞—Å, 3-–≤–∞–ª—É–µ
        keyboard.add(b)
    for btn in btns:
        if btn[3] != '0':
            keyboard.add(types.InlineKeyboardButton('üîò –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë', callback_data='alloff,sw'))
            break
    try:
        bot.send_message(call.from_user.id, "üí° - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∫–ª—é—á–µ–Ω–æ \n‚ú® - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–∫–ª—é—á–µ–Ω–æ", reply_markup=keyboard)
    except (ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError, requests.exceptions.ReadTimeout):
        print('!!!')


@bot.callback_query_handler(func=lambda call: call.data[-2:] == 'sw')
def switches2(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    call.data = call.data.split(',')
    # print('call.data in', call.data)
    btns = sql.device_data_for_user('SWITCH', call.from_user.id)
    # print('btns in:', btns)

    if call.data[0] != 'alloff':
        for btn in btns:
            if btn[0] == call.data[0]:
                bot_answer = btn[1]
                if call.data[1] =='0':
                    btn[3] = '1'
                    bot_answer +=' –í–ö–õ–Æ–ß–ï–ù–û'
                else:
                    btn[3] = '0'
                    bot_answer += ' –í–´–ö–õ–Æ–ß–ï–ù–û'

                sql.topic_value(btn[0], btn[3])
                bot.answer_callback_query(call.id, text='‚ö† ' + bot_answer)  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                # bot.send_message(call.from_user.id, text='‚ö† ' + bot_answer)

            if btn[3] == '1': emoji = 'üí°'
            else: emoji = '‚ú®'

            b = types.InlineKeyboardButton(emoji + btn[1], callback_data=btn[0] + ',' + btn[3] + ',sw')  # 0-—Ç–æ–ø–∏–∫, 1-–∞–ª–∏–∞—Å, 3-–≤–∞–ª—É–µ
            keyboard.add(b)

            print('btns out:', btns)

    else: # –∫–Ω–æ–ø–∫–∞ –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë
        bot.answer_callback_query(call.id, text='‚ö† –í–´–ö–õ–Æ–ß–ï–ù–ò–ï')  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        for btn in btns:
            if btn[3] != '0':
                btn[3] = '0'
                sql.topic_value(btn[0], btn[3])
            b = types.InlineKeyboardButton('‚ú®' + btn[1],
                                           callback_data=btn[0] + ',' + btn[3] + ',sw')  # 0-—Ç–æ–ø–∏–∫, 1-–∞–ª–∏–∞—Å, 3-–≤–∞–ª—É–µ
            keyboard.add(b)

    for btn in btns:
        if btn[3] != '0':
            keyboard.add(types.InlineKeyboardButton('üîò –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë', callback_data='alloff,sw'))
            break

    try:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,  text="üí° - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∫–ª—é—á–µ–Ω–æ \n‚ú® - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–∫–ª—é—á–µ–Ω–æ", reply_markup=keyboard)
    except (ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError, requests.exceptions.ReadTimeout):
        print('!!! telebot.apihelper.ApiException or !!! ConnectionResetError or !!! requests.exceptions.ConnectionError')


# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö SENSOR –∏–∑ –ë–î
@bot.callback_query_handler(func=lambda call: call.data == 'sensors')
def sensors(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    btns = sql.device_data_for_user('SENSOR', call.from_user.id)
    print('btns in:', btns)
    for btn in btns:
        b = types.InlineKeyboardButton('üìä '+btn[1], callback_data=btn[0]+','+btn[3]+',sn')  # 0-—Ç–æ–ø–∏–∫, 1-–∞–ª–∏–∞—Å, 3-value !!!calldata - 42 —Å–∏–º–≤–æ–ª–∞ max
        keyboard.add(b)
    keyboard.add(types.InlineKeyboardButton('üìä –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤', callback_data='alldata,sn'))
    try:
        bot.send_message(chat_id=call.from_user.id, text="üìä - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤:", reply_markup=keyboard)
    except (ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError, requests.exceptions.ReadTimeout):
        print('!!!')


@bot.callback_query_handler(func=lambda call: call.data[-2:] == 'sn')
def sensors2(call):
    call.data = call.data.split(',')
    print('call.data in', call.data)
    btns = sql.device_data_for_user('SENSOR', call.from_user.id) # topic, topic_alias, measurement, value, alarm_mode

    for btn in btns:
        if btn[0] == call.data[0]:
            if btn[3] == 'Opened': btn[3]='–û—Ç–∫—Ä—ã—Ç–æ'
            if btn[3] == 'Closed': btn[3]='–ó–∞–∫—Ä—ã—Ç–æ'
            if btn[3] == 'Motion detected': btn[3]='–ï—Å—Ç—å –¥–≤–∏–∂–Ω–∏–µ'
            if btn[3] == 'No motion': btn[3] = '–ù–µ—Ç –¥–≤–∏–∂–Ω–∏—è'
            bot.answer_callback_query(call.id, text='‚ö† '+btn[1]+' '+btn[2]+': '+btn[3])  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            bot.send_message(call.from_user.id, text='‚ö† '+btn[1]+' '+btn[2]+': '+btn[3])

    if call.data[0] == 'alldata':
        all=''
        try:
            for btn in btns:
                if btn[3] == 'Opened': btn[3]='–û—Ç–∫—Ä—ã—Ç–æ'
                if btn[3] == 'Closed': btn[3]='–ó–∞–∫—Ä—ã—Ç–æ'
                if btn[3] == 'Motion detected': btn[3]='–ï—Å—Ç—å –¥–≤–∏–∂–Ω–∏–µ'
                if btn[3] == 'No motion': btn[3] = '–ù–µ—Ç –¥–≤–∏–∂–Ω–∏—è'
                all += '‚ñ´'+btn[1] + ' ' + btn[2] + ' ' + btn[3] + '\n'
            bot.answer_callback_query(call.id, text='‚ö† –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')
            bot.send_message(call.message.chat.id, all) # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        except:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")


# –†–µ–∂–∏–º—ã
@bot.callback_query_handler(func=lambda call: call.data == 'modes')
def modes(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    btn_climat = types.InlineKeyboardButton('üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É', callback_data='climat')
    btn_security = types.InlineKeyboardButton('üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', callback_data='security')
    keyboard.add(btn_climat, btn_security)
    try:
        bot.send_message(chat_id=call.from_user.id, text="–†–µ–∂–∏–º—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–æ–≤:", reply_markup=keyboard)
    except (ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError, requests.exceptions.ReadTimeout):
        print('!!!')

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏
@bot.callback_query_handler(func=lambda call: call.data == 'climat')
def climat(call):
    climat_dev = sql.climat_devices(call.from_user.id) # [] topic, topic_alias, climat_mode
    heat = '-'
    cool = '-'
    metering = '-'
    for i in climat_dev:
        if i[2] == 'HEAT':
            heat = i[0] + ', ' + i[1]
        elif i[2] == 'COOL':
            cool = i[0] + ', ' + i[1]
        elif i[2] == 'METERING':
            metering = i[0] + ', ' + i[1]

    text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞:\n' + heat + '\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è:\n' + cool + '\n–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n' + metering
    keyboard2 = types.InlineKeyboardMarkup(row_width=1)
    b_heat = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞', callback_data='heat')
    b_cool = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', callback_data='cool')
    b_tem = types.InlineKeyboardButton('–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', callback_data='temper')
    keyboard2.add(b_heat, b_cool, b_tem)
    bot.send_message(chat_id=call.from_user.id, text=text + '\n–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', reply_markup=keyboard2)

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    keyboard.add(*[types.InlineKeyboardButton(str(15+i)+'¬∞C', callback_data=str(15+i)+',c') for i in range(20)])
    bot.send_message(chat_id=call.from_user.id, text='üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏: ', reply_markup=keyboard)


# –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–æ–≥—Ä–µ–≤–∞
@bot.callback_query_handler(func=lambda call: call.data == 'heat')
def heater(call):
    switches = sql.my_switches(call.from_user.id) # topic, topic_alias, climat_mode
    keyboard = types.InlineKeyboardMarkup()
    print(switches)
    for sw in switches:
        if sw[2] == 'HEAT':
            simbo = '‚ô®'
            b = types.InlineKeyboardButton(simbo+' '+sw[0]+' '+sw[1], callback_data=sw[0]+',_heat')
        else:
            b = types.InlineKeyboardButton(sw[0]+' '+sw[1], callback_data=sw[0]+',s_heat')
        keyboard.add(b)
    bot.send_message(chat_id=call.from_user.id, text='–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–æ–≥—Ä–µ–≤–∞:\n‚ô® - –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', reply_markup=keyboard)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–æ–≥—Ä–µ–≤–∞
@bot.callback_query_handler(func=lambda call: call.data[-6:] == 's_heat')
def set_heat(call):
    call.data = call.data.split(',')
    print(call.data)
    switches = sql.my_switches(call.from_user.id)
    for sw in switches:
        if sw[2] == 'HEAT':
            sql.set_climat_device(sw[0], 'NONE')
    sql.set_climat_device(call.data[0], 'HEAT')

    climat_dev = sql.climat_devices(call.from_user.id)  # [] topic, topic_alias, climat_mode
    heat = '-'
    cool = '-'
    metering = '-'
    for i in climat_dev:
        if i[2] == 'HEAT':
            heat = i[0] + ', ' + i[1]
        elif i[2] == 'COOL':
            cool = i[0] + ', ' + i[1]
        elif i[2] == 'METERING':
            metering = i[0] + ', ' + i[1]

    text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞:\n' + heat + '\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è:\n' + cool + '\n–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n' + metering
    keyboard2 = types.InlineKeyboardMarkup(row_width=1)
    b_heat = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞', callback_data='heat')
    b_cool = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', callback_data='cool')
    b_tem = types.InlineKeyboardButton('–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', callback_data='temper')
    keyboard2.add(b_heat, b_cool, b_tem)
    bot.send_message(chat_id=call.from_user.id, text=text + '\n–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', reply_markup=keyboard2)

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    keyboard.add(*[types.InlineKeyboardButton(str(15 + i) + '¬∞C', callback_data=str(15 + i) + ',c') for i in range(20)])
    bot.send_message(chat_id=call.from_user.id, text='üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏: ', reply_markup=keyboard)

# –£–±–∏—Ä–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–æ–≥—Ä–µ–≤–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ)
@bot.callback_query_handler(func=lambda call: call.data[-5:] == '_heat')
def set_heat2(call):
    call.data = call.data.split(',')
    sql.set_climat_device(call.data[0], 'NONE')

    climat_dev = sql.climat_devices(call.from_user.id)  # [] topic, topic_alias, climat_mode
    heat = '-'
    cool = '-'
    metering = '-'
    for i in climat_dev:
        if i[2] == 'HEAT':
            heat = i[0] + ', ' + i[1]
        elif i[2] == 'COOL':
            cool = i[0] + ', ' + i[1]
        elif i[2] == 'METERING':
            metering = i[0] + ', ' + i[1]

    text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞:\n' + heat + '\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è:\n' + cool + '\n–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n' + metering
    keyboard2 = types.InlineKeyboardMarkup(row_width=1)
    b_heat = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞', callback_data='heat')
    b_cool = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', callback_data='cool')
    b_tem = types.InlineKeyboardButton('–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', callback_data='temper')
    keyboard2.add(b_heat, b_cool, b_tem)
    bot.send_message(chat_id=call.from_user.id, text=text + '\n–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', reply_markup=keyboard2)

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    keyboard.add(*[types.InlineKeyboardButton(str(15 + i) + '¬∞C', callback_data=str(15 + i) + ',c') for i in range(20)])
    bot.send_message(chat_id=call.from_user.id, text='üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏: ', reply_markup=keyboard)


# –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == 'cool')
def cooler(call):
    switches = sql.my_switches(call.from_user.id)
    keyboard = types.InlineKeyboardMarkup()
    print(switches)
    for sw in switches:
        simbo =''
        if sw[2] == 'COOL':
            simbo = 'üåÄ'
            b = types.InlineKeyboardButton(simbo+' '+sw[0]+ ' '+ sw[1], callback_data=sw[0]+',_cool')
        else:
            b = types.InlineKeyboardButton(simbo+' '+sw[0]+ ' '+ sw[1], callback_data=sw[0]+',s_cool')
        keyboard.add(b)
    bot.send_message(chat_id=call.from_user.id, text='–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è:\nüåÄ - –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', reply_markup=keyboard)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data[-6:] == 's_cool')
def set_cool(call):
    call.data = call.data.split(',')
    print(call.data)
    switches = sql.my_switches(call.from_user.id)
    for sw in switches:
        if sw[2] == 'COOL':
            sql.set_climat_device(sw[0], 'NONE')
    sql.set_climat_device(call.data[0], 'COOL')

    climat_dev = sql.climat_devices(call.from_user.id)  # [] topic, topic_alias, climat_mode
    heat = '-'
    cool = '-'
    metering = '-'
    for i in climat_dev:
        if i[2] == 'HEAT':
            heat = i[0] + ', ' + i[1]
        elif i[2] == 'COOL':
            cool = i[0] + ', ' + i[1]
        elif i[2] == 'METERING':
            metering = i[0] + ', ' + i[1]

    text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞:\n' + heat + '\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è:\n' + cool + '\n–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n' + metering
    keyboard2 = types.InlineKeyboardMarkup(row_width=1)
    b_heat = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞', callback_data='heat')
    b_cool = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', callback_data='cool')
    b_tem = types.InlineKeyboardButton('–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', callback_data='temper')
    keyboard2.add(b_heat, b_cool, b_tem)
    bot.send_message(chat_id=call.from_user.id, text=text + '\n–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', reply_markup=keyboard2)

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    keyboard.add(*[types.InlineKeyboardButton(str(15 + i) + '¬∞C', callback_data=str(15 + i) + ',c') for i in range(20)])
    bot.send_message(chat_id=call.from_user.id, text='üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏: ', reply_markup=keyboard)

# –£–±–∏—Ä–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data[-5:] == '_cool')
def set_cool2(call):
    call.data = call.data.split(',')
    sql.set_climat_device(call.data[0], 'NONE')

    climat_dev = sql.climat_devices(call.from_user.id)  # [] topic, topic_alias, climat_mode
    heat = '-'
    cool = '-'
    metering = '-'
    for i in climat_dev:
        if i[2] == 'HEAT':
            heat = i[0] + ', ' + i[1]
        elif i[2] == 'COOL':
            cool = i[0] + ', ' + i[1]
        elif i[2] == 'METERING':
            metering = i[0] + ', ' + i[1]

    text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞:\n' + heat + '\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è:\n' + cool + '\n–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n' + metering
    keyboard2 = types.InlineKeyboardMarkup(row_width=1)
    b_heat = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞', callback_data='heat')
    b_cool = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', callback_data='cool')
    b_tem = types.InlineKeyboardButton('–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', callback_data='temper')
    keyboard2.add(b_heat, b_cool, b_tem)
    bot.send_message(chat_id=call.from_user.id, text=text + '\n–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', reply_markup=keyboard2)

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    keyboard.add(*[types.InlineKeyboardButton(str(15 + i) + '¬∞C', callback_data=str(15 + i) + ',c') for i in range(20)])
    bot.send_message(chat_id=call.from_user.id, text='üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏: ', reply_markup=keyboard)

# –í—ã–±–æ—Ä —Å–µ–Ω—Å–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data == 'temper')
def temperature(call):
    switches = sql.my_sensors(call.from_user.id)
    keyboard = types.InlineKeyboardMarkup()
    print(switches)
    for sw in switches:
        simbo =''
        if sw[2] == 'METERING':
            simbo = '‚úî'
            b = types.InlineKeyboardButton(simbo+' '+sw[0]+ ' '+ sw[1], callback_data=sw[0]+',_temper')
        else:
            b = types.InlineKeyboardButton(simbo+' '+sw[0]+ ' '+ sw[1], callback_data=sw[0]+',s_temper')
        keyboard.add(b)
    bot.send_message(chat_id=call.from_user.id, text='–í—ã–±–æ—Ä —Å–µ–Ω—Å–æ—Ä–∞ –¥–ª—è –∑–∞–º–µ—Ä–æ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n‚úî - –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', reply_markup=keyboard)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ–Ω—Å–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data[-8:] == 's_temper')
def set_temper(call):
    call.data = call.data.split(',')
    # print(call.data)
    switches = sql.my_sensors(call.from_user.id)
    for sw in switches:
        if sw[2] == 'METERING':
            sql.set_climat_device(sw[0], 'NONE')
    sql.set_climat_device(call.data[0], 'METERING')

    climat_dev = sql.climat_devices(call.from_user.id)  # [] topic, topic_alias, climat_mode
    heat = '-'
    cool = '-'
    metering = '-'
    for i in climat_dev:
        if i[2] == 'HEAT':
            heat = i[0] + ', ' + i[1]
        elif i[2] == 'COOL':
            cool = i[0] + ', ' + i[1]
        elif i[2] == 'METERING':
            metering = i[0] + ', ' + i[1]

    text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞:\n' + heat + '\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è:\n' + cool + '\n–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n' + metering
    keyboard2 = types.InlineKeyboardMarkup(row_width=1)
    b_heat = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞', callback_data='heat')
    b_cool = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', callback_data='cool')
    b_tem = types.InlineKeyboardButton('–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', callback_data='temper')
    keyboard2.add(b_heat, b_cool, b_tem)
    bot.send_message(chat_id=call.from_user.id, text=text + '\n–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', reply_markup=keyboard2)

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    keyboard.add(*[types.InlineKeyboardButton(str(15 + i) + '¬∞C', callback_data=str(15 + i) + ',c') for i in range(20)])
    bot.send_message(chat_id=call.from_user.id, text='üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏: ', reply_markup=keyboard)

# –£–±–∏—Ä–∞–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data[-7:] == '_temper')
def set_temper2(call):
    call.data = call.data.split(',')
    sql.set_climat_device(call.data[0], 'NONE')

    climat_dev = sql.climat_devices(call.from_user.id)  # [] topic, topic_alias, climat_mode
    heat = '-'
    cool = '-'
    metering = '-'
    for i in climat_dev:
        if i[2] == 'HEAT':
            heat = i[0] + ', ' + i[1]
        elif i[2] == 'COOL':
            cool = i[0] + ', ' + i[1]
        elif i[2] == 'METERING':
            metering = i[0] + ', ' + i[1]

    text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞:\n' + heat + '\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è:\n' + cool + '\n–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n' + metering
    keyboard2 = types.InlineKeyboardMarkup(row_width=1)
    b_heat = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞', callback_data='heat')
    b_cool = types.InlineKeyboardButton('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', callback_data='cool')
    b_tem = types.InlineKeyboardButton('–°–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã', callback_data='temper')
    keyboard2.add(b_heat, b_cool, b_tem)
    bot.send_message(chat_id=call.from_user.id, text=text + '\n–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', reply_markup=keyboard2)

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    keyboard.add(*[types.InlineKeyboardButton(str(15 + i) + '¬∞C', callback_data=str(15 + i) + ',c') for i in range(20)])
    bot.send_message(chat_id=call.from_user.id, text='üå° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏: ', reply_markup=keyboard)

climat_clients=[]
# –∑–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data[-2:] == ',c')    ################################################ –Ω—É–∂–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –æ—Ç—Ä—É–±–∞–µ—Ç—Å—è –æ—Ç —Ä–∞–±–æ—Ç—ã security()
def start_climat(call):
    call.data = call.data.split(',')
    print(call.data)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω—ã
    climat_dev = sql.climat_devices(call.from_user.id) # [] topic, topic_alias, climat_mode
    # print(climat_dev)
    heat = False
    cool = False
    metering = False
    for i in climat_dev:
        if i[2] == 'HEAT': heat = True
        elif i[2] == 'COOL': cool = True
        elif i[2] == 'METERING': metering = True
    mes=''
    if heat == False: mes += '–ù–µ –∑–∞–¥–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–æ–≥—Ä–µ–≤–∞\n'
    if cool == False: mes += '–ù–µ –∑–∞–¥–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è\n'
    if metering == False: mes += '–ù–µ –∑–∞–¥–∞–Ω —Å–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã'
    if len(mes) > 0:
        bot.send_message(chat_id=call.from_user.id, text=mes)
    # –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω—ã, —Ç–æ–≥–¥–∞
    else:
        sensors_data = sql.device_data_for_user('SENSOR',
                                        call.from_user.id)  # topic, topic_alias, measurement, value, climat_mode, alarm_mode

        for sen_dat in sensors_data:
            if sen_dat[4] == 'METERING':
                now_temperature = sen_dat[3]  # —Ç–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞

                try:
                    float(sen_dat[3]) # —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–∏—Å–ª–æ–º
                    keyboard = types.InlineKeyboardMarkup()
                    stop_temper=types.InlineKeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data='stop_clim')
                    keyboard.add(stop_temper)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text='‚ö† –ò–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ' + sen_dat[
                                              3] + ' ¬∞C\n–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ' +
                                               call.data[0] + ' ¬∞C', reply_markup=keyboard)

                    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    global climat_clients
                    climat_clients.append(call.from_user.id)

                    t = Thread(target=set_temperature, args=(call, climat_dev))
                    t.start()

                except:
                    bot.send_message(chat_id=call.from_user.id,
                                     text='–í—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
def set_temperature(call, climat_dev):
    while call.from_user.id in climat_clients:
        sensors_data = sql.device_data_for_user('SENSOR',
                                                call.from_user.id)  # topic, topic_alias, measurement, value, climat_mode, alarm_mode
        for sen_dat in sensors_data:
            if sen_dat[4] == 'METERING':
                now_temperature = sen_dat[3]

        print('current', float(now_temperature), 'set', float(call.data[0]))
        if float(now_temperature) < float(call.data[0]):
            for device in climat_dev:
                if device[2] == 'HEAT':
                    sql.topic_value(device[0], '1')
                elif device[2] == 'COOL':
                    sql.topic_value(device[0], '0')

        elif float(now_temperature) > float(call.data[0]):
            for device in climat_dev:
                if device[2] == 'HEAT':
                    sql.topic_value(device[0], '0')
                elif device[2] == 'COOL':
                    sql.topic_value(device[0], '1')

        elif float(now_temperature) == float(call.data[0]):
            for device in climat_dev:
                if device[2] == 'HEAT':
                    sql.topic_value(device[0], '0')
                elif device[2] == 'COOL':
                    sql.topic_value(device[0], '0')
            bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                  text='‚ö† –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ' + call.data[0] + ' ¬∞C')
            climat_clients.remove(call.from_user.id)

# –†—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data == 'stop_clim')
def stop_climat(call):
    global climat_clients
    climat_clients.remove(call.from_user.id)
    climat_dev = sql.climat_devices(call.from_user.id)  # [] topic, topic_alias, climat_mode
    for device in climat_dev:
        if device[2] == 'HEAT':
            sql.topic_value(device[0], '0')
        elif device[2] == 'COOL':
            sql.topic_value(device[0], '0')
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text='‚ö† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')


# –í–ö–õ/–í–´–ö–õ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ–Ω—Å–æ—Ä–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == 'security')
def security_activation(call):
    # print('call.from_user.id',call.from_user.id)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    btns = sql.device_data_for_user('SENSOR', call.from_user.id) # topic, topic_alias, measurement, value, climat_mode, alarm_mode
    # print(btns)
    for btn in btns:
        if btn[5] == 1:
            emoji = 'üö®'
        else:
            emoji = '‚ú®'
        b = types.InlineKeyboardButton(emoji + btn[1],
                                       callback_data=btn[0] + ',' + str(btn[5]) + ',sen')  # topic, topic_alias, measurement, value, climat_mode, alarm_mode
        keyboard.add(b)

    for btn in btns:
        if btn[5] != 0:
            keyboard.add(types.InlineKeyboardButton('üîò –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='alloff,sen'))
            break
    try:
        bot.send_message(call.from_user.id, "–í–ö–õ/–í–´–ö–õ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ–Ω—Å–æ—Ä–æ–≤\nüö® - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n‚ú® - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã",
                         reply_markup=keyboard)
    except (
    ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError,
    requests.exceptions.ReadTimeout):
        print('!!!')

@bot.callback_query_handler(func=lambda call: call.data[-3:] == 'sen')
def security_activation2(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    call.data = call.data.split(',')
    # print('call.data in', call.data)
    btns = sql.device_data_for_user('SENSOR', call.from_user.id)
    # print('btns in:', btns)

    if call.data[0] != 'alloff':
        for btn in btns:
            if btn[0] == call.data[0]:
                bot_answer = btn[1]
                if call.data[1] == '0':
                    btn[5] = 1
                    bot_answer += ' –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í–ö–õ'
                else:
                    btn[5] = 0
                    bot_answer += ' –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í–´–ö–õ'

                sql.set_alarm_mode(btn[0], btn[5])
                bot.answer_callback_query(call.id, text='‚ö† ' + bot_answer)  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                # bot.send_message(call.from_user.id, text='‚ö† ' + bot_answer)

            if btn[5] == 1:
                emoji = 'üö®'
            else:
                emoji = '‚ú®'

            b = types.InlineKeyboardButton(emoji + btn[1],
                                           callback_data=btn[0] + ',' + str(btn[5]) + ',sen')
            keyboard.add(b)

            # print('btns out:', btns)

    else:  # –∫–Ω–æ–ø–∫–∞ –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å—ë
        bot.answer_callback_query(call.id, text='‚ö† –í–´–ö–õ–Æ–ß–ï–ù–ò–ï')  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        for btn in btns:
            if btn[5] != 0:
                btn[5] = 0
                sql.set_alarm_mode(btn[0], btn[5])
            b = types.InlineKeyboardButton('‚ú®' + btn[1],
                                           callback_data=btn[0] + ',' + str(btn[5]) + ',sen')  # —Ç–æ–ø–∏–∫, –∞–ª–∏–∞—Å, –≤–∞–ª—É, –º–µ–∂—É—Ä–º–µ–Ω—Ç, –∞–ª—è—Ä–º_–º–æ–¥
            keyboard.add(b)

    for btn in btns:
        if btn[5] != 0:
            keyboard.add(types.InlineKeyboardButton('üîò –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='alloff,sen'))
            break

    try:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í–ö–õ/–í–´–ö–õ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ–Ω—Å–æ—Ä–æ–≤\nüö® - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n‚ú® - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã", reply_markup=keyboard)
    except (
    ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError,
    requests.exceptions.ReadTimeout):
        print(
            '!!! telebot.apihelper.ApiException or !!! ConnectionResetError or !!! requests.exceptions.ConnectionError')

####################################################################################################--- –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

####################################################################################################--- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# –ú–æ–∏ Wi-Fi –º–æ–¥—É–ª–∏ (–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π)
@bot.callback_query_handler(func=lambda call: call.data == 'm_add')
def modules_add_del(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    modules = sql.modules_root1(call.from_user.id)
    for module in modules:
        b = types.InlineKeyboardButton('‚ùé  ' + module, callback_data=module + ',del')
        keyboard.add(b)
    keyboard.add(types.InlineKeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å', callback_data='new'))
    try:
        bot.send_message(call.from_user.id, "–í—ã - –≤–ª–∞–¥–µ–ª–µ—Ü Wi-Fi –º–æ–¥—É–ª–µ–π: \n‚ùé - –ü–æ –Ω–∞–∂–∞—Ç–∏—é –º–æ–¥—É–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω", reply_markup=keyboard)
    except (
    ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError,
    requests.exceptions.ReadTimeout):
        print('!!!')

@bot.callback_query_handler(func=lambda call: call.data[-3:] == 'del')
def modules_del(call):
    call.data = call.data.split(',')
    sql.del_module(call.data[0])

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    modules = sql.modules_root1(call.from_user.id)
    for module in modules:
        b = types.InlineKeyboardButton('‚ùé  ' + module, callback_data=module + ',del')
        keyboard.add(b)
    keyboard.add(types.InlineKeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å', callback_data='new'))

    bot.answer_callback_query(call.id, text='‚ö† –£–¥–∞–ª–µ–Ω –º–æ–¥—É–ª—å ' + call.data[0])  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    try:
        bot.send_message(call.from_user.id, "–í—ã - –≤–ª–∞–¥–µ–ª–µ—Ü Wi-Fi –º–æ–¥—É–ª–µ–π: \n‚ùé - –ü–æ –Ω–∞–∂–∞—Ç–∏—é –º–æ–¥—É–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω",
                         reply_markup=keyboard)
    except (
            ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError,
            urllib3.exceptions.ReadTimeoutError,
            requests.exceptions.ReadTimeout):
        print('!!!')

@bot.callback_query_handler(func=lambda call: call.data == 'new')
def modules_new(call):
    code = bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ Wi-Fi –º–æ–¥—É–ª—è')
    bot.register_next_step_handler(code, check_code)

def check_code(msg):
    a_codes = sql.activation_codes()
    true_code = False
    for code in a_codes:
        if code == msg.text:
            true_code = True  # –∫–æ–¥ –Ω–∞–π–¥–µ–Ω
            sql.new_module(code, msg.from_user.id)
            # bot.answer_callback_query(msg.id, text='‚ö† –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å')  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

            keyboard = types.InlineKeyboardMarkup(row_width=1)
            modules = sql.modules_root1(msg.from_user.id)
            for module in modules:
                b = types.InlineKeyboardButton('‚ùé  ' + module, callback_data=module + ',del')
                keyboard.add(b)
            keyboard.add(types.InlineKeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å', callback_data='new'))
            try:
                bot.send_message(msg.from_user.id, "–í—ã - –≤–ª–∞–¥–µ–ª–µ—Ü Wi-Fi –º–æ–¥—É–ª–µ–π: \n‚ùé - –ü–æ –Ω–∞–∂–∞—Ç–∏—é –º–æ–¥—É–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω",
                                 reply_markup=keyboard)
            except (
                    ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError,
                    urllib3.exceptions.ReadTimeoutError,
                    requests.exceptions.ReadTimeout):
                print('!!!')

    if true_code == False:  # –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        bot.send_message(msg.from_user.id, text="‚ö† –ù–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ú–æ–¥—É–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# –ò–º–µ–Ω–∞ –º–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
@bot.callback_query_handler(func=lambda call: call.data == 'd_names')
def device_names(call):
    topics_names = sql.topics_names(call.from_user.id)
    # print(topics_names)
    bot.send_message(call.from_user.id, '–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:')
    for name in topics_names:
        keyboard = types.InlineKeyboardMarkup()
        b = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚¨Ü', callback_data = name[0]+',xtopic')
        keyboard.add(b)
        bot.send_message(call.from_user.id, '–¢–æ–ø–∏–∫: '+name[0]+'\n–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: '+name[1], reply_markup=keyboard)

topic=''
@bot.callback_query_handler(func=lambda call: call.data[-6:] == 'xtopic')
def device_names2(call):
    call.data = call.data.split(',')
    topics_names = sql.topics_names(call.from_user.id)
    global topic
    topic = call.data[0]
    for t in topics_names:
        if t[0] == call.data[0]:
            n_name = bot.send_message(call.from_user.id, '–¢–æ–ø–∏–∫: '+call.data[0]+'\n–í–≤–µ–¥–∏—Ç–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è')
            bot.register_next_step_handler(n_name, new_name)

def new_name(msg):
    global topic
    # print('--topic', topic)
    # print('--name', msg.text)
    sql.new_device_name(topic, msg.text)
    bot.send_message(msg.from_user.id, '–ü—Ä–∏—Å–≤–æ–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É \n–¢–æ–ø–∏–∫: '+topic+'\n–ò–º—è: '+msg.text)

# –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
@bot.callback_query_handler(func=lambda call: call.data == 'v_com')
def voice_comm(call):
    #############################################################
    topics_names = sql.topics_names_root1(call.from_user.id)
    # print(topics_names)
    voice_com = sql.voice_com()
    # print(voice_com)
    #############################################################
    rez=[]
    for i in voice_com:
        for j in topics_names:
            if i[1] == j[0]:
                rez_consist=[i[0], i[1], j[1], i[2], i[3]]
                rez.append(rez_consist)
    bot.send_message(call.from_user.id, '–°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:')
    # print(rez)

    for comm in rez:
        type=''
        if comm[4] == 'DATA': type = '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
        elif comm[4] == 'ON': type = '–í–∫–ª—é—á–µ–Ω–∏–µ'
        elif comm[4] == 'OFF': type = '–í—ã–∫–ª—é—á–µ–Ω–∏–µ'
        keyboard = types.InlineKeyboardMarkup()
        b = types.InlineKeyboardButton('‚ùé –£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É ‚¨Ü', callback_data=str(comm[0]) + ',del_com')
        keyboard.add(b)
        bot.send_message(call.from_user.id, '–¢–æ–ø–∏–∫: ' + comm[1] + '\n–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ' + comm[2]+'\n–¢–∏–ø –∫–æ–º–∞–Ω–¥—ã: '+type+'\n–¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã: '+'<i>'+comm[3]+'</i>', parse_mode='HTML', reply_markup=keyboard)
    keyboard2 = types.InlineKeyboardMarkup()
    new_com = types.InlineKeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É', callback_data='new_com' )
    keyboard2.add(new_com)
    bot.send_message(call.from_user.id, 'üÜï', reply_markup=keyboard2)

@bot.callback_query_handler(func=lambda call: call.data[-7:] == 'del_com')
def del_command(call):
    call.data = call.data.split(',')
    sql.del_command(call.data[0])
    bot.answer_callback_query(call.id, text='‚ö† –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞')  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    topics_names = sql.topics_names(call.from_user.id)
    # print(topics_names)
    voice_com = sql.voice_com()
    # print(voice_com)
    rez = []
    for i in voice_com:
        for j in topics_names:
            if i[1] == j[0]:
                rez_consist = [i[0], i[1], j[1], i[2], i[3]]
                rez.append(rez_consist)
    bot.send_message(call.from_user.id, '–°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:')
    # print(rez)

    for comm in rez:
        type = ''
        if comm[4] == 'DATA':
            type = '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
        elif comm[4] == 'ON':
            type = '–í–∫–ª—é—á–µ–Ω–∏–µ'
        elif comm[4] == 'OFF':
            type = '–í—ã–∫–ª—é—á–µ–Ω–∏–µ'
        keyboard = types.InlineKeyboardMarkup()
        b = types.InlineKeyboardButton('‚ùé –£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É ‚¨Ü', callback_data=str(comm[0]) + ',del_com')
        keyboard.add(b)
        bot.send_message(call.from_user.id, '–¢–æ–ø–∏–∫: ' + comm[1] + '\n–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ' + comm[
            2] + '\n–¢–∏–ø –∫–æ–º–∞–Ω–¥—ã: ' + type + '\n–¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã: ' + '<i>' + comm[3] + '</i>', parse_mode='HTML',
                         reply_markup=keyboard)
    keyboard2 = types.InlineKeyboardMarkup()
    new_com = types.InlineKeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É', callback_data='new_com')
    keyboard2.add(new_com)
    bot.send_message(call.from_user.id, 'üÜï', reply_markup=keyboard2)


@bot.callback_query_handler(func=lambda call: call.data == 'new_com')
def new_command(call):
    topics_names = sql.topics_names(call.from_user.id)
    keyboard = types.InlineKeyboardMarkup()

    for t in topics_names:
        print('--t--', t)
        b = types.InlineKeyboardButton(t[0]+'; '+t[1], callback_data=t[0]+',type_com')
        keyboard.add(b)
    bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data[-8:] == 'type_com')
def new_command(call):
    call.data=call.data.split(',')
    # print('call.data--', call.data)
    type_device = sql.type_device(call.data[0])
    type_command=[]
    if type_device == 'SENSOR':
        type_command=[('–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'DATA'),]
    elif type_device == 'SWITCH':
        type_command=[('–í–∫–ª—é—á–∏—Ç—å','ON'),('–í—ã–∫–ª—é—á–∏—Ç—å','OFF')]
    keyboard = types.InlineKeyboardMarkup()

    for t in type_command:
        b = types.InlineKeyboardButton(t[0], callback_data=call.data[0]+','+t[1]+',enter_text') # 0-—Ä—É—Å —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã,1-—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
        keyboard.add(b)
    bot.send_message(call.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –¥–ª—è '+call.data[0], reply_markup=keyboard)

topic_comtype=[]
@bot.callback_query_handler(func=lambda call: call.data[-10:] == 'enter_text')
def text_command(call):
    call.data = call.data.split(',')
    global topic_comtype
    topic_comtype =[call.data[0], call.data[1]]
    type_com=''
    if call.data[1] == 'DATA': type_com = '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
    elif call.data[1] == 'ON': type_com = '–í–∫–ª—é—á–∏—Ç—å'
    elif call.data[1] == 'OFF': type_com = '–í—ã–∫–ª—é—á–∏—Ç—å'
    txt = bot.send_message(call.from_user.id, 'üÜï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n'+call.data[0]+ '\n—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã:\n'+ type_com + '\n(–¥–ª—è –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏—Ö –Ω–æ–º–µ—Ä–∞ "–û–¥–∏–Ω/–ü–µ—Ä–≤—ã–π/–ü–µ—Ä–≤–∞—è", "–î–≤–∞/–í—Ç–æ—Ä–æ–π/–í—Ç–æ—Ä–∞—è", "–¢—Ä–∏/–¢—Ä–µ—Ç–∏–π/–¢—Ä–µ—Ç—å—è", –∏ —Ç. –¥. –∏–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–∏—Ñ—Ä—ã 1, 2, 3, –∏ —Ç.–ø.)')
    bot.register_next_step_handler(txt, txt_command)

def txt_command(txt):
    global topic_comtype
    # print(topic_comtype)

    sql.new_voice_command(topic_comtype[0], topic_comtype[1], txt.text.lower()) # —Ç–æ–ø–∏–∫, —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã, —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    device_name = sql.alias_device(topic_comtype[0])
    bot.send_message(txt.from_user.id, '–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É\n'+topic_comtype[0]+'; '+device_name+':\n'+txt.text)


# –ò–Ω—Ñ–æ –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Wi-Fi –º–æ–¥—É–ª–∏
@bot.callback_query_handler(func=lambda call: call.data == 'm_info')
def modules_info(call):
    keyboard = types.InlineKeyboardMarkup()
    modules = sql.modules(call.from_user.id)
    for module in modules:
        b = types.InlineKeyboardButton('üåê  ' + module, callback_data=module+',inf')
        keyboard.add(b)
    try:
        bot.send_message(call.from_user.id, "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ Wi-Fi –º–æ–¥—É–ª–∏. \n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö:", reply_markup=keyboard)
    except (ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError, urllib3.exceptions.ReadTimeoutError, requests.exceptions.ReadTimeout):
        print('!!!')

@bot.callback_query_handler(func=lambda call: call.data[-3:] == 'inf')
def modules_info2(call):
    call.data = call.data.split(',')
    info = 'üîπ –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: '
    inf = sql.module_info(call.data[0])
    if not inf:
        info += '-'
    else:
        info+='\n'+inf
    info += '\nüîπ –í–ª–∞–¥–µ–ª–µ—Ü: '
    owner = sql.owner(call.data[0])
    for ow in owner:
        info+='\n'+ow
    info += '\nüîπ –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: '
    users = sql.another_users(call.data[0])
    if not users:
        info += '-'
    else:
        for user in users:
            info+='\n'+user
    info += '\nüîπ –ò–º–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Ç–æ–ø–∏–∫–∏: '
    names = sql.names(call.data[0])
    if not names:
        info += '-'
    else:
        for name in names:
            info += '\n--–ò–º—è: '+name[1]+'\n   –¢–æ–ø–∏–∫: '+name[0]

    bot.send_message(call.from_user.id, info)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.callback_query_handler(func=lambda call: call.data == 'm_users')
def another_users(call):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    modules = sql.modules_root1(call.from_user.id)
    for module in modules:
        b = types.InlineKeyboardButton('üåê '+module, callback_data=module+',another')
        keyboard.add(b)
    try:
        bot.send_message(call.from_user.id, "Wi-Fi –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
                         reply_markup=keyboard)
    except (
            ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError,
            urllib3.exceptions.ReadTimeoutError,
            requests.exceptions.ReadTimeout):
        print('!!!')

@bot.callback_query_handler(func=lambda call: call.data[-7:] == 'another')
def another_users(call):
    call.data = call.data.split(',')
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    a_us =sql.another_users(call.data[0])

    for a_u in a_us:
        b = types.InlineKeyboardButton('‚ùé ' + a_u, callback_data=a_u +','+call.data[0]+',del_a_u')
        keyboard.add(b)
    keyboard.add(types.InlineKeyboardButton('‚úÖ –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data=call.data[0]+',new_u'))

    try:
        bot.send_message(call.from_user.id, 'Wi-Fi –º–æ–¥—É–ª—å üåê '+call.data[0]+' –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: \n‚ùé - –ü–æ –Ω–∞–∂–∞—Ç–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω', reply_markup=keyboard)
    except (
            ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError,
            urllib3.exceptions.ReadTimeoutError,
            requests.exceptions.ReadTimeout):
        print('!!!')

@bot.callback_query_handler(func=lambda call: call.data[-7:] == 'del_a_u')
def another_users2(call):
    call.data = call.data.split(',')
    # print('--call.data--', call.data)
    sql.del_user(call.data[0], call.data[1])

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    a_us = sql.another_users(call.data[1])

    for a_u in a_us:
        b = types.InlineKeyboardButton('‚ùé ' + a_u, callback_data=a_u + ','+call.data[1]+',del_a_u')
        keyboard.add(b)
    keyboard.add(types.InlineKeyboardButton('‚úÖ –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data=call.data[1]+',new_u'))

    bot.answer_callback_query(call.id, text='‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '+call.data[0]+' –æ—Ç–∫–ª—é—á–µ–Ω')  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    try:
        bot.send_message(call.from_user.id,
                         'Wi-Fi –º–æ–¥—É–ª—å üåê '+call.data[1]+' –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: \n‚ùé - –ü–æ –Ω–∞–∂–∞—Ç–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω',
                         reply_markup=keyboard)
    except (
            ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError,
            urllib3.exceptions.ReadTimeoutError,
            requests.exceptions.ReadTimeout):
        print('!!!')

controller_id=''
@bot.callback_query_handler(func=lambda call: call.data[-5:] == 'new_u')
def another_user_new(call):
    call.data = call.data.split(',')
    print('new_u', call.data)
    global controller_id
    controller_id = call.data[0]
    new_phone = bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω–æ–≥–æ Wi-Fi –º–æ–¥—É–ª—è')
    # print(type(new_phone))
    bot.register_next_step_handler(new_phone, add_phone)
    # print(new_phone.text)
    # add_phone(call.data[0], new_phone)

def add_phone(new_ph):
    try:
        global controller_id
        len_num = len(new_ph.text)
        num=(int(new_ph.text))    # —Å—ä–µ–¥–∞–µ—Ç –Ω—É–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
        num = str(num)

        if len_num != len(num):
            zeros = len_num - len(num)
            for i in range(zeros):
                num = '0' + num

        print('num', num)
        telnum = sql.check_phone_module(num, controller_id)
        if telnum == True:
            bot.send_message(new_ph.from_user.id, '‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '+num+ ' —ç—Ç–æ—Ç Wi-Fi –º–æ–¥—É–ª—å —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
        else:
            sql.insert_user(num, controller_id)

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        a_us = sql.another_users(controller_id)

        for a_u in a_us:
            b = types.InlineKeyboardButton('‚ùé ' + a_u, callback_data=a_u + ',' + controller_id + ',del_a_u')
            keyboard.add(b)
        keyboard.add(
            types.InlineKeyboardButton('‚úÖ –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data=controller_id + ',new_u'))

        # bot.answer_callback_query(new_ph.from_user.id, text='‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + num + ' —É–¥–∞–ª–µ–Ω')  # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        try:
            bot.send_message(new_ph.from_user.id,
                             'Wi-Fi –º–æ–¥—É–ª—å üåê ' + controller_id + ' –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: \n‚ùé - –ü–æ –Ω–∞–∂–∞—Ç–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω',
                             reply_markup=keyboard)
        except (
                ConnectionResetError, urllib3.exceptions.ProtocolError, ConnectionError,
                urllib3.exceptions.ReadTimeoutError,
                requests.exceptions.ReadTimeout):
            print('!!!')

    except ValueError:
        bot.send_message(new_ph.chat.id, "‚ö† –í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏")
################################################################################################---–ù–∞—Å—Ç—Ä–æ–π–∫–∏

################################################################################################---–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
@bot.message_handler(content_types=['voice'])
def voice_processing(message):
    '''–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'''
    bot.send_message(message.chat.id, "‚è≥...")
    file_info = bot.get_file(message.voice.file_id)
    file = requests.get(
        'https://api.telegram.org/file/bot{0}/{1}'.format(config.bot_token, file_info.file_path))
    print(file.content)

    speech_text = voice.speech_to_text(bytes=file.content)
    print(speech_text)
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id+1)
    bot.send_message(message.chat.id, speech_text)

    topics_names = sql.topics_names(message.from_user.id)
    # print(topics_names)
    voice_com = sql.voice_com()
    # print(voice_com)

    rez = []
    for i in voice_com:
        for j in topics_names:
            if i[1] == j[0]:
                rez_consist = [i[0], i[1], j[1], i[2], i[3]]
                rez.append(rez_consist)

    print('rez', rez)
    for i in rez:
        if i[3] == speech_text:
            if i[4] == 'DATA':
                value = sql.return_topic_value(i[1])
                bot.send_message(message.from_user.id, i[2]+': '+value[0]+' '+value[1])
            elif i[4] == 'ON':
                sql.topic_value(i[1], '1')
                bot.send_message(message.from_user.id, 'üí° '+i[2] + ': –í–∫–ª—é—á–µ–Ω–æ')
            elif i[4] == 'OFF':
                sql.topic_value(i[1], '0')
                bot.send_message(message.from_user.id, '‚ú® ' + i[2] + ': –í—ã–∫–ª—é—á–µ–Ω–æ')
################################################################################################---–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)

        except Exception as e:
            print(e)
            time.sleep(15)


    # while(1):
    #     try:
    #         bot.polling(none_stop=True)
    #     except (ConnectionResetError, urllib3.exceptions.ProtocolError, requests.exceptions.ConnectionError):
    #         continue

    # try:
    #     bot.polling(none_stop=True)
    # except:
    #     time.sleep(3)
    #     os.system('main.py')
    # else:
    #     print('system OK')

